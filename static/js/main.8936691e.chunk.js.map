{"version":3,"sources":["logo.svg","Config/ActionTypes.js","Reducer/home.js","reducers.js","Action/home.js","Config/Service.js","Config/Endpoint.js","Sagas/home.js","sagas.js","store.js","MasterMenu/MainMenu/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SET_LOADER","INIT_MAIN_MENU","HANDLE_STATE_MAIN_MENU","GET_DATA_MAIN_MENU","GET_DATA_MAIN_MENU_SUCCESS","initState","loader","listData","search","country","reducers","homeState","state","arguments","length","undefined","action","type","Object","objectSpread","value","defineProperty","field","setLoader","dispatch","getState","actionType","getData","handleState","property","GET","url","header","axios","get","then","res","status","data","catch","err","response","swals","fire","title","text","statusText","allowOutsideClick","confirmButtonText","confirm","stack","message","endpoint","searchNameCountry","_baseUrl","rootSaga","_response","regenerator_default","a","wrap","_context","prev","next","put","call","Endpoint","sent","console","log","t0","stop","_marked","_context2","all","takeEvery","_marked2","Home","sagas_marked","sagaMiddleware","createSagaMiddleware","middlewares","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","applyMiddleware","apply","run","numeral","require","id","home","isShowCountry","isShowSquare","isValueRadio","isNumberlistOfArray","remove","k","form","_this","props","keys","getFieldValue","setFieldsValue","filter","key","add","nextKeys","concat","handleSubmit","e","preventDefault","validateFields","values","names","map","parseInt","this","setState","_this$props","charCode","_this2","_this$props$form","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","initialValue","formItemsDynamic","index","react_default","createElement","es_form","Item","assign","label","required","validateTrigger","rules","whitespace","input","placeholder","style","width","marginRight","icon","className","onClick","reactblockui_es","tag","blocking","es_radio","Group","name","defaultValue","onChange","handleChange","target","row","onSubmit","col","hasFeedback","extra","onChangeState","currentTarget","disabled","size","onKeyPress","onEnterKeyPress","es_button","htmlType","obj","idx","margin","cioc","src","flag","nativeName","numericCode","population","format","region","subregion","alpha2Code","alpha3Code","area","capital","demonym","gini","topLevelDomain","obj2","idx2","altSpellings","borders","callingCodes","currencies","code","symbol","languages","latlng","regionalBlocs","acronym","timezones","height","obj1","_rowspan","replace","Fragment","backgroundColor","rowSpan","Component","mapDispatchToProps","WrappedFormWIthSubmissionButton","Form","create","connect","App","react_redux_es","MainMenu_home","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8936691e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const SET_LOADER = \"SET_LOADER\"\r\n\r\nexport const INIT_MAIN_MENU = \"INIT_MAIN_MENU\"\r\nexport const HANDLE_STATE_MAIN_MENU = \"HANDLE_STATE_MAIN_MENU\"\r\nexport const GET_DATA_MAIN_MENU = \"GET_DATA_MAIN_MENU\"\r\nexport const GET_DATA_MAIN_MENU_SUCCESS = \"GET_DATA_MAIN_MENU_SUCCESS\"\r\n","import {\r\n    SET_LOADER,\r\n    INIT_MAIN_MENU,\r\n    HANDLE_STATE_MAIN_MENU,\r\n    GET_DATA_MAIN_MENU_SUCCESS\r\n} from '../Config/ActionTypes'\r\n\r\nconst initState = {\r\n    loader: false,\r\n    listData: [],\r\n    search: {\r\n        country: ''\r\n    }\r\n}\r\n\r\nexport default function HomeState(state = initState, action) {\r\n    switch (action.type) {\r\n        case SET_LOADER:\r\n            return {\r\n                ...state,\r\n                loader: action.value\r\n            }\r\n        case HANDLE_STATE_MAIN_MENU: {\r\n            return {\r\n                ...state,\r\n                search: { ...state.search, [action.field]: action.value }\r\n            }\r\n        }\r\n        case INIT_MAIN_MENU: {\r\n            return {\r\n                ...state,\r\n                search: {\r\n                    country: ''\r\n                }\r\n            }\r\n        }\r\n        case GET_DATA_MAIN_MENU_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                listData: action.value\r\n            }\r\n        }\r\n        default:\r\n    }\r\n    return state\r\n}","import homeState from './Reducer/home'\r\n\r\nexport default {\r\n    homeState\r\n}","import * as actionType from '../Config/ActionTypes'\r\n\r\nexport function setLoader(value) {\r\n    return (dispatch, getState) => {\r\n        dispatch({ type: actionType.SET_LOADER, value })\r\n    }\r\n}\r\n\r\nexport function getData(value) {\r\n    return (dispatch, getState) => {\r\n        dispatch({ type: actionType.GET_DATA_MAIN_MENU, value })\r\n    }\r\n}\r\n\r\nexport function initForm() {\r\n    return (dispatch, getState) => {\r\n        dispatch({ type: actionType.INIT_MAIN_MENU })\r\n    }\r\n}\r\n\r\nexport function handleState(property, value) {\r\n    return (dispatch, getState) => {\r\n        dispatch({ type: actionType.HANDLE_STATE_MAIN_MENU, field: property, value: value })\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    getData,\r\n    initForm,\r\n    setLoader,\r\n    handleState\r\n}","import axios from 'axios';\r\nimport swals from 'sweetalert2'\r\n\r\nexport function GET(url, header) {\r\n    return axios.get(url, header)\r\n        .then((res) => {\r\n            if (res.status == 200) {\r\n                return res.data\r\n            }\r\n            else if (res.status == 401) {\r\n                return res.data\r\n            }\r\n            else {\r\n                return res.data\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            if (err.response.status == 401) {\r\n                swals.fire({\r\n                    title: 'Info',\r\n                    text: err.response.statusText,\r\n                    type: 'info',\r\n                    allowOutsideClick: false,\r\n                    confirmButtonText: 'Ya',\r\n                }).then(function (confirm) {\r\n                    // actionLogout()\r\n                })\r\n            }\r\n            else if (err.response == undefined) {\r\n                swals.fire({\r\n                    title: 'Info',\r\n                    text: err.stack,\r\n                    type: 'info',\r\n                    allowOutsideClick: false,\r\n                    confirmButtonText: 'Ya',\r\n                }).then(function (confirm) {\r\n                    // actionLogout()\r\n                })\r\n            }\r\n            else {\r\n                swals.fire({\r\n                    title: 'Info',\r\n                    text: err.response.data.message,\r\n                    type: 'info',\r\n                    allowOutsideClick: false,\r\n                    confirmButtonText: 'Ya',\r\n                }).then(function (confirm) {\r\n                    // actionLogout()\r\n                })\r\n            }\r\n            return err.response.data\r\n        })\r\n}\r\n","let _baseUrl = 'https://restcountries.eu/rest/v2/'\r\n\r\nconst endpoint = {\r\n    searchNameCountry: _baseUrl + 'name'\r\n}\r\n\r\nexport default endpoint","import { all, call, put, takeEvery } from 'redux-saga/effects';\r\nimport { setLoader } from '../Action/home'\r\nimport { SET_LOADER, GET_DATA_MAIN_MENU, GET_DATA_MAIN_MENU_SUCCESS } from '../Config/ActionTypes'\r\nimport { GET } from '../Config/Service'\r\nimport Endpoint from '../Config/Endpoint'\r\nimport axios from 'axios';\r\n\r\nexport function* getData(action) {\r\n    try {\r\n        yield put(setLoader(true))\r\n        \r\n        const _response = yield call(GET, Endpoint.searchNameCountry + '/' + action.value, '')\r\n        console.log(\"_response\", _response)\r\n        yield put({ type: GET_DATA_MAIN_MENU_SUCCESS, value: _response })\r\n\r\n        yield put(setLoader(false))\r\n    } catch (error) {\r\n\r\n        yield put(setLoader(false))\r\n    }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        takeEvery(GET_DATA_MAIN_MENU, getData),\r\n    ])\r\n}","import { all } from 'redux-saga/effects';\r\nimport Home from './Sagas/home';\r\nexport default function* rootSaga(getState) {\r\n  yield all([\r\n    Home()\r\n  ]);\r\n}\r\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport reducers from './reducers';\r\nimport rootSaga from './sagas';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middlewares = [thunk, sagaMiddleware];\r\nconst composeEnhancers =\r\n  typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      // Specify extensionâ€™s options like name, actionsBlacklist, actionsCreators, serialize...\r\n    })\r\n    : compose;\r\n\r\nconst store = createStore(\r\n  combineReducers({\r\n    ...reducers\r\n  }),\r\n  composeEnhancers(applyMiddleware(...middlewares))\r\n);\r\nsagaMiddleware.run(rootSaga);\r\nexport { store };\r\n","import React, { Component } from 'react';\r\nimport { getData, handleState } from '../../Action/home'\r\nimport { connect } from 'react-redux'\r\nimport { Input, Form, Row, Col, Radio, Icon, Button } from 'antd';\r\nimport BlockUi from \"react-block-ui\";\r\nimport '../../Style/home.scss'\r\n\r\nvar numeral = require('numeral');\r\nlet id = 0;\r\n\r\nclass home extends Component {\r\n\r\n    state = {\r\n        isShowCountry: true,\r\n        isShowSquare: false,\r\n        isValueRadio: 1,\r\n        isNumberlistOfArray: null\r\n    }\r\n\r\n    componentWillMount() { }\r\n\r\n    onChangeState(field, value) {\r\n        let { handleState } = this.props\r\n        handleState(field, value)\r\n    }\r\n\r\n    remove = (k) => {\r\n        const { form } = this.props;\r\n        // can use data-binding to get\r\n        const keys = form.getFieldValue('keys');\r\n        if (keys.length === 1) {\r\n            return;\r\n        }\r\n\r\n        // can use data-binding to set\r\n        form.setFieldsValue({\r\n            keys: keys.filter(key => key !== k),\r\n        });\r\n    }\r\n    add = () => {\r\n        const { form } = this.props;\r\n        // can use data-binding to get\r\n        const keys = form.getFieldValue('keys');\r\n        const nextKeys = keys.concat(id++);\r\n        // can use data-binding to set\r\n        // important! notify form to detect changes\r\n        form.setFieldsValue({\r\n            keys: nextKeys,\r\n        });\r\n    };\r\n\r\n\r\n    handleChange(field, value) {\r\n        this.setState({\r\n            [field]: value\r\n        })\r\n        if (value == 1) this.setState({ isShowCountry: true, isShowSquare: false })\r\n        else this.setState({ isShowCountry: false, isShowSquare: true })\r\n    }\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                const { keys, names } = values;\r\n                console.log('Received values of form: ', values);\r\n                console.log('Merged values:', keys.map(key => parseInt(names[key])));\r\n                this.state.isNumberlistOfArray = keys.map(key => names[key])\r\n\r\n                console.log(\"isNumberlistOfArray\", this.state.isNumberlistOfArray)\r\n            }\r\n        });\r\n    };\r\n\r\n    onEnterKeyPress(e) {\r\n        let { homeState, getData } = this.props\r\n        if (e.charCode == 13) {\r\n            getData(homeState.search.country)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { homeState } = this.props\r\n        const { getFieldDecorator, getFieldValue } = this.props.form\r\n\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 4 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 20 },\r\n            },\r\n        };\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 4 },\r\n            },\r\n        };\r\n\r\n        getFieldDecorator('keys', { initialValue: [] });\r\n        const keys = getFieldValue('keys');\r\n        const formItemsDynamic = keys.map((k, index) => (\r\n            <Form.Item\r\n                {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                label={index === 0 ? 'Number of Array' : ''}\r\n                required={false}\r\n                key={k}\r\n            >\r\n                {getFieldDecorator(`names[${k}]`, {\r\n                    validateTrigger: ['onChange', 'onBlur'],\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            whitespace: true,\r\n                            message: \"Please input number of array or delete this field.\",\r\n                        },\r\n                    ],\r\n                })(<Input placeholder=\"Number of Array\" type={'number'} style={{ width: '60%', marginRight: 8 }} />)}\r\n                {keys.length > 1 ? (\r\n                    <Icon\r\n                        className=\"dynamic-delete-button\"\r\n                        type=\"minus-circle-o\"\r\n                        onClick={() => this.remove(k)}\r\n                    />\r\n                ) : null}\r\n            </Form.Item>\r\n        ));\r\n\r\n\r\n        return (\r\n            <BlockUi\r\n                tag=\"div\"\r\n                blocking={homeState.loader}\r\n                // blocking={true}\r\n                message={\r\n                    <span>\r\n                        <div id=\"preloader\">\r\n                            <div id=\"loader\"></div>\r\n                        </div>\r\n                    </span>\r\n                }\r\n            >\r\n                <div>\r\n                    <div className=\"header\">\r\n                        <div className=\"positionHeader\">\r\n                            <Radio.Group name=\"radiogroup\" defaultValue={this.state.isValueRadio} value={this.state.isValueRadio} onChange={(e) => this.handleChange('isValueRadio', e.target.value)}>\r\n                                <Radio value={1}>Show Search Country</Radio>\r\n                                <Radio value={2}>Show Square Logic</Radio>\r\n                            </Radio.Group>\r\n                            <Row>\r\n                                <Form onSubmit={this.handleSubmit}>\r\n                                    <Col span={24}>\r\n                                        {\r\n                                            this.state.isShowCountry ?\r\n                                                <Form.Item hasFeedback extra=\"Hit 'Enter' to search\">\r\n                                                    {getFieldDecorator('country', {\r\n                                                        initialValue: homeState.search.country,\r\n                                                        onChange: ((e) => this.onChangeState('country', e.currentTarget.value)),\r\n                                                        rules: [\r\n                                                            {\r\n                                                                required: false,\r\n                                                                message: '',\r\n                                                            },\r\n                                                        ],\r\n                                                    })(<Input disabled={!this.state.isShowCountry} placeholder=\"Search Country\" size=\"large\" style={{ width: '50%' }} onKeyPress={(e) => this.onEnterKeyPress(e)} />)}\r\n                                                </Form.Item>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                        {\r\n                                            this.state.isShowSquare ?\r\n                                                <div>\r\n                                                    {formItemsDynamic}\r\n                                                    <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                                        <Button type=\"dashed\" onClick={this.add} style={{ width: '60%' }}>\r\n                                                            <Icon type=\"plus\" /> Add field\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n                                                    <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                                        <Button type=\"primary\" htmlType=\"submit\">\r\n                                                            Submit\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n                                                </div>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </Col>\r\n                                </Form>\r\n                            </Row>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"content\">\r\n                        {\r\n                            this.state.isShowCountry ?\r\n                                homeState.listData.length != 0 ?\r\n                                    homeState.listData.map((obj, idx) => {\r\n                                        return (\r\n                                            <div key={idx} className=\"content-item\">\r\n                                                <div style={{ margin: '30px' }}>\r\n                                                    <div className=\"content-item-name\">Country : {obj.name} [{obj.cioc}] <img src={obj.flag} style={{ width: \"10%\" }} /></div>\r\n                                                    <br /><br />\r\n                                                    <table className=\"table table-responsive\">\r\n                                                        <thead>\r\n                                                            <tr>\r\n                                                                <th>Description :</th>\r\n                                                            </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                            <tr>\r\n                                                                <td>Native Name</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.nativeName}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Numeric Code</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.numericCode}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Population</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{numeral(obj.population).format('0,0')} People(s)</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Region</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.region}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Sub Region</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.subregion}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Alpha 2 Code</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.alpha2Code}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Alpha 3 Code</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.alpha3Code}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Area</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.area}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Capital</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.capital}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Demonym</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.demonym}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Gini</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.gini}</td>\r\n                                                            </tr>\r\n                                                            {/* LIST */}\r\n                                                            <tr>\r\n                                                                <td>Top Level Domain</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.topLevelDomain.map((obj2, idx2) => {\r\n                                                                    return (\r\n                                                                        <div>\r\n                                                                            {obj2}<br />\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                })}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Spelling</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.altSpellings.map((obj2, idx2) => {\r\n                                                                    return (\r\n                                                                        <div>\r\n                                                                            {obj2}<br />\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                })}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Borders</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.borders.map((obj2, idx2) => {\r\n                                                                    return (\r\n                                                                        <div>\r\n                                                                            {obj2}<br />\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                })}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Calling Codes</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.callingCodes.map((obj2, idx2) => {\r\n                                                                    return (\r\n                                                                        <div>\r\n                                                                            {obj2}<br />\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                })}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Currency</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.currencies.map((obj2, idx2) => {\r\n                                                                    return (\r\n                                                                        <div>\r\n                                                                            {obj2.code} | {obj2.name} | {obj2.symbol}<br />\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                })}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Language</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.languages.map((obj2, idx2) => {\r\n                                                                    return (\r\n                                                                        <div>\r\n                                                                            {obj2.name} | {obj2.nativeName}<br />\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                })}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Latitude Longitude</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.latlng.map((obj2, idx2) => {\r\n                                                                    return (\r\n                                                                        <div>\r\n                                                                            {obj2}<br />\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                })}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Regional Block</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.regionalBlocs.map((obj2, idx2) => {\r\n                                                                    return (\r\n                                                                        <div>\r\n                                                                            {obj2.acronym} = {obj2.name}<br />\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                })}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Time Zone</td>\r\n                                                                <td>:</td>\r\n                                                                <td>{obj.timezones.map((obj2, idx2) => {\r\n                                                                    return (\r\n                                                                        <div>\r\n                                                                            {obj2}<br />\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                })}</td>\r\n                                                            </tr>\r\n                                                        </tbody>\r\n                                                    </table>\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                    :\r\n                                    null\r\n                                :\r\n                                <div>\r\n                                    <table style={{ width: \"-webkit-fill-available\", height: \"100px\" }}>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                {\r\n                                                    this.state.isNumberlistOfArray != null ?\r\n                                                        this.state.isNumberlistOfArray.map((obj1, idx) => {\r\n                                                            let _rowspan = 0\r\n                                                            let obj = \"\" + obj1\r\n                                                            _rowspan = obj.replace('-', '')\r\n\r\n                                                            if (obj < \"0\") {\r\n                                                                return (\r\n                                                                    <React.Fragment>\r\n                                                                        <td style={{ backgroundColor: \"red\" }} rowSpan={_rowspan} key={idx}></td>\r\n                                                                    </React.Fragment>\r\n                                                                )\r\n                                                            }\r\n                                                            else if (obj == \"0\") {\r\n                                                                return (\r\n                                                                    <React.Fragment>\r\n                                                                        <td rowSpan={_rowspan} key={idx} style={{ backgroundColor: \"white\" }}></td>\r\n                                                                    </React.Fragment>\r\n                                                                )\r\n                                                            }\r\n                                                            else {\r\n                                                                return (\r\n                                                                    <React.Fragment>\r\n                                                                        <td style={{ backgroundColor: \"green\" }} rowSpan={_rowspan} key={idx}></td>\r\n                                                                    </React.Fragment>\r\n                                                                )\r\n                                                            }\r\n                                                        })\r\n                                                        :\r\n                                                        null\r\n                                                }\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </BlockUi >\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    homeState: state.homeState\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    getData,\r\n    handleState\r\n}\r\n\r\nconst WrappedFormWIthSubmissionButton = Form.create({ name: 'dynamic_form_item' })(home);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedFormWIthSubmissionButton);","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { store } from './store'\nimport { Provider } from \"react-redux\";\nimport Home from './MasterMenu/MainMenu/home'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles.scss'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Home />\n      {/* <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n        </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n        </a>\n        </header>\n      </div> */}\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}